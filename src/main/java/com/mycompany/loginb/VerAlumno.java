/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.loginb;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anthony
 */
public class VerAlumno extends javax.swing.JFrame {
    /**
     * Creates new form VerAlumno
     */
    public VerAlumno() {
        initComponents();
        this.setLocationRelativeTo(null); 
       Profesor profesorLogeado = LoginB.profesorLogeado;

if (profesorLogeado != null) {
    this.setLocationRelativeTo(null); 
    for (Curso curso : LoginB.cursos) {
        if (curso.getProfesor().equals(profesorLogeado.usuario)) {
            jComboBox1.addItem(curso.getNombre() + " - Sección: " + curso.getSeccion());
        }
      }
    }
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Curso");

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("Asignar la Nota");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Nota");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jButton1)
                                        .addGap(59, 59, 59)
                                        .addComponent(jButton2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
   String nombreCurso = jComboBox1.getSelectedItem().toString();
        Curso cursoSeleccionado = null;

        // Buscando el curso correspondiente en la lista de cursos
        for (Curso curso : LoginB.cursos) {
            if ((curso.getNombre() + " - Sección: " + curso.getSeccion()).equals(nombreCurso)) {
                // Se encontró el curso correspondiente
                cursoSeleccionado = curso;
                break;
            }
        }

        // Verificando si se encontró el curso
        if (cursoSeleccionado != null) {
            // Llenando la tabla con la información de los alumnos inscritos en ese curso
            DefaultTableModel data = new DefaultTableModel(new String[]{"Carné", "Nombre", "Apellido", "Nota"}, cursoSeleccionado.getAlumnos().size());
            jTable1.setModel(data);

            int row = 0;

            for (Alumno alumno : cursoSeleccionado.getAlumnos()) {
                jTable1.setValueAt(alumno.getCarne(), row, 0);
                jTable1.setValueAt(alumno.getNombre(), row, 1);
                jTable1.setValueAt(alumno.getApellido(), row, 2);
                jTable1.setValueAt(alumno.getNota(), row, 3);
                row++;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BienvenidaProfesor c = new BienvenidaProfesor();
        c.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // Obtener el nombre del curso seleccionado del combo box
    String nombreCurso = jComboBox1.getSelectedItem().toString();
    Curso cursoSeleccionado = null;

    // Buscar el curso correspondiente en la lista de cursos
    for (Curso curso : LoginB.cursos) {
        if ((curso.getNombre() + " - Sección: " + curso.getSeccion()).equals(nombreCurso)) {
            // Se encontró el curso correspondiente
            cursoSeleccionado = curso;
            break;
        }
    }

    // Validar si se encontró el curso
    if (cursoSeleccionado == null) {
        JOptionPane.showMessageDialog(this, "Curso no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener y validar la nota ingresada
    String notaTexto = jTextField1.getText();
    int nota;
    try {
        nota = Integer.parseInt(notaTexto);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "La nota ingresada no es válida", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar si se seleccionó una fila en la tabla
    int row = jTable1.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione un alumno de la tabla", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener el carné del alumno seleccionado en la tabla
    String carne = jTable1.getModel().getValueAt(row, 0).toString();

    // Buscar el alumno correspondiente en la lista de alumnos del curso y actualizar la nota
    boolean alumnoEncontrado = false;
    for (Alumno s : cursoSeleccionado.getAlumnos()) {
        if (s.getCarne().equals(carne)) {
            s.setNota(nota); // Usar el setter correspondiente para actualizar la nota
            alumnoEncontrado = true;
            break;
        }
    }

    // Validar si se encontró el alumno
    if (!alumnoEncontrado) {
        JOptionPane.showMessageDialog(this, "Alumno no encontrado en el curso", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Nota actualizada exitosamente");
        // Actualizar la tabla para reflejar el cambio
        jTable1.setValueAt(nota, row, 3);
    }
    
    }//GEN-LAST:event_jButton3ActionPerformed

    

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
